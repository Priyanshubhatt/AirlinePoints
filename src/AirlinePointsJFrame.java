
import java.util.*;
import java.io.*;
import java.util.ArrayList;
import java.util.Arrays;

/**
 * Programmer:  Priyanshu Bhatt
 * Date:  Thursday, January 28, 2021
 * Program Name:  Airline Points 
 * Program Description: This application that allows an airline to record airline 
 * points data for its passengers and to determine if a passenger qualifies for bonus
 * points. The add button initializes 10 passengers listed in the "AirplanePointsCustomers.txt" 
 * to the AirlinePoints array list. The application gets the first name, last name, and 4 week
 * of points. The program adds customers to the database, list points for all passengers, find the 
 * total points for a specific passenger, determines if a specific passenger qualifies
 * for bonus points and display a message indicating if [s]he qualifies or not. If the
 * number of points earned for the month is greater than 5 000, a message is displayed 
 * indicating that the user has qualified for a bonus of 1 000 extra points. The program has 
 * an edit button which allows the user to edit the number of points of a specific customer. 
 * There is another button that allows the user to delete a passenger off of the database. 
 * The sort button allows the user to sort the passengers alphabetically based on their first name, 
 * regardless of case. The search feature allows the user to find a specific passenger along 
 * with the passenger's 4 weeks points as well as the total. Finally, the exit button removes 
 * the previously listed information, and replaces with the current information, and then closes 
 * the program, saving the given data.
 */
public class AirlinePointsJFrame extends javax.swing.JFrame {

    /**
     * Creates new form AirlinePointsJFrame
     */
    public AirlinePointsJFrame() {
        initComponents();
    }
    
    //Declarring the array list that stores Names and Points 
    ArrayList <AirlinePointsClass> AirlinePoints = new ArrayList <AirlinePointsClass>();
    
    int totalPoints = 0;        // Initializes variable for total points
    int counter = 0;            // Initializes variable for counter in order to read text file
    int counterE = 0;           // Initializes variable for counter to clear text file and replace it with current data
        
    BufferedReader br;          // Initializes buffered reader for reading text file
    FileWriter fw;              // Initializes file writer to write in file
    BufferedWriter bw;          // Initializes buffered writer to write in file
    PrintWriter pw;             // Initializes print writer
    
    // This user defined method receives the points for 4 weeks and gets the sum
    public int totalPointsF(int week1, int week2, int week3, int week4) {
                
        int totalPoints = week1 + week2 + week3 + week4;        // Calculates the sum
        
        return totalPoints;
    }
    
    // This user defined method receives all the information of a passenger and adds it to the database
    public Object addCustomer(String firstName,String lastName,int week1,int week2,int week3,int week4){
        
        /*This initializes ap, allowing ap to gather given inputs,
        *and send it to the array*/
        AirlinePointsClass ap;
                        
        //The inforrmation is being sent to the class
        ap = new AirlinePointsClass(firstName, lastName, week1, week2, week3, week4);
        
        //The class is sending all the information to the database
        return AirlinePoints.add(ap);   
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField3 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        buttonAdd = new javax.swing.JButton();
        buttonList = new javax.swing.JButton();
        buttonTP = new javax.swing.JButton();
        inputLast = new javax.swing.JTextField();
        inputFirst = new javax.swing.JTextField();
        inputWeek2 = new javax.swing.JTextField();
        inputWeek1 = new javax.swing.JTextField();
        inputWeek3 = new javax.swing.JTextField();
        inputWeek4 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        outputDisplay = new javax.swing.JTextArea();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        buttonEdit = new javax.swing.JButton();
        buttonDelete = new javax.swing.JButton();
        buttonExit = new javax.swing.JButton();
        buttonSort = new javax.swing.JButton();
        buttonSearch = new javax.swing.JButton();

        jButton3.setText("Delete");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("First Name:");

        jLabel2.setFont(new java.awt.Font("Sitka Subheading", 3, 24)); // NOI18N
        jLabel2.setText("Airline Points");

        jLabel3.setText("Last Name:");

        jLabel4.setText("Week 1:");

        jLabel5.setText("Week 2:");

        jLabel6.setText("Week 3:");

        jLabel7.setText("Week 4:");

        buttonAdd.setText("Add");
        buttonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddActionPerformed(evt);
            }
        });

        buttonList.setText("List");
        buttonList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonListActionPerformed(evt);
            }
        });

        buttonTP.setText("Total Points");
        buttonTP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonTPActionPerformed(evt);
            }
        });

        outputDisplay.setColumns(20);
        outputDisplay.setRows(5);
        jScrollPane1.setViewportView(outputDisplay);

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Airplane.jpg"))); // NOI18N

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AirplaneFlip.jpg"))); // NOI18N

        buttonEdit.setText("Edit");
        buttonEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEditActionPerformed(evt);
            }
        });

        buttonDelete.setText("Delete");
        buttonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDeleteActionPerformed(evt);
            }
        });

        buttonExit.setText("Exit");
        buttonExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonExitActionPerformed(evt);
            }
        });

        buttonSort.setText("Sort");
        buttonSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSortActionPerformed(evt);
            }
        });

        buttonSearch.setText("Search");
        buttonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel8)
                .addGap(35, 35, 35)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addComponent(jLabel9)
                .addGap(21, 21, 21))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(inputFirst, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel4)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(inputWeek1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel5)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(inputWeek2, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(jLabel6)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(inputWeek3, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(buttonAdd)
                                    .addComponent(jLabel3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(inputLast, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(buttonSearch)
                                            .addComponent(buttonDelete)
                                            .addComponent(buttonEdit)
                                            .addComponent(buttonSort))
                                        .addGap(9, 9, 9))))
                            .addComponent(buttonList)
                            .addComponent(buttonTP)
                            .addComponent(buttonExit))
                        .addContainerGap(87, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(inputWeek4, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel9)
                    .addComponent(jLabel8))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(inputLast, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inputFirst, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buttonAdd)
                            .addComponent(buttonEdit))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(inputWeek1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonList)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(inputWeek2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(buttonDelete))
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputWeek3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(buttonTP)
                    .addComponent(buttonSort))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(inputWeek4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttonExit)))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buttonSearch)))
                .addGap(32, 32, 32)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddActionPerformed
        // TODO add your handling code here:
        
        // Counter for deleting lines in text files
        counterE++;
        
        /*This initializes ap, allowing ap to gather given inputs,
        *and send it to the array*/
        AirlinePointsClass ap;
                
        // Declaring the variables that retrieve the users inputs
        int week1, week2, week3, week4;
        String firstName, lastName;
        
        if(counter == 0){       // Just so this runs only once
            try {
                //This reads the file (Binary)
                br = new BufferedReader(new FileReader("AirplanePointsCustomers.txt"));         // Finds the file for the reader to read
                try{
                //Sets a limit so its not exceeded
                while(counter < 10)
                {
                    firstName = br.readLine();                  //Adds first names
                    lastName = br.readLine();                   //Adds last names
                    week1= Integer.valueOf(br.readLine());      //Adds week 1 points
                    week2= Integer.valueOf(br.readLine());      //Adds week 2 points
                    week3 = Integer.valueOf(br.readLine());     //Adds week 3 points
                    week4 = Integer.valueOf(br.readLine());     //Adds week 4 points
                    
                    ap = new AirlinePointsClass( firstName, lastName, week1, week2, week3, week4);          // Places the information in the specific order to place in database
                    
                    AirlinePoints.add(ap);          // This adds the passenger to the database
                    counter++;                      // Counter to only make the text file to be read once
                }

                //Closes the buffered reader
                br.close();

                } catch (IOException e) {
                e.printStackTrace();

                }
                } catch (FileNotFoundException e) {
                    e.printStackTrace();
            }
        }
        
        //Receiving and storing the users inputs
        firstName = inputFirst.getText();                   // This gets the first name
        lastName = inputLast.getText();                     // This gets the last name
        week1 = Integer.parseInt(inputWeek1.getText());     // This gets the points for the 1st week and turns the value into an integer
        week2 = Integer.parseInt(inputWeek2.getText());     // This gets the points for the 2nd week and turns the value into an integer
        week3 = Integer.parseInt(inputWeek3.getText());     // This gets the points for the 3rd week and turns the value into an integer
        week4 = Integer.parseInt(inputWeek4.getText());     // This gets the points for the 4th week and turns the value into an integer       
                
        addCustomer(firstName, lastName, week1, week2, week3, week4);       // Places the information in the specific order to place in database and adds the passenger to the database
        
    }//GEN-LAST:event_buttonAddActionPerformed

    private void buttonListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonListActionPerformed
        // TODO add your handling code here:
        
        //Declaring string which will be used to store the statemnet
        String temp="";
        
        //This will store the total points of the name given
        totalPoints = 0;
        
        /*This is gathering all the values and creating a statemnet,
         *along with showing who qualified for a bonus */ 
        for (int x = 0; x <= AirlinePoints.size()-1; x++) 
        {
            // If the name given matches with the name in the array, then it uses the totalPointsF user class to add the 4 weeks to get the total
            totalPoints = totalPointsF(AirlinePoints.get(x).week1, AirlinePoints.get(x).week2, AirlinePoints.get(x).week3, AirlinePoints.get(x).week4);
            
            /* This if statement is for the bonus. If the total points are higher
             * than 5000, then it gives the bonus to the person, if not, then it says no bonus*/
            if(totalPoints > 5000)
            {
                temp = temp + AirlinePoints.get(x).firstName + " "                                      // This gets the first name
                            + AirlinePoints.get(x).lastName + "    "                                    // This gets the last name
                            + AirlinePoints.get(x).week1 + "    "                                       // This gets the points for the 1st week and adds it to the statement
                            + AirlinePoints.get(x).week2 + "    "                                       // This gets the points for the 2nd week and adds it to the statement
                            + AirlinePoints.get(x).week3 + "    "                                       // This gets the points for the 3rd week and adds it to the statement
                            + AirlinePoints.get(x).week4 + "   User qualifies for a bonus" + "\n";      // This gets the points for the 4th week and adds it to the statement, and it also says that user qualified for a bonus
            }
            else
            {
                temp = temp + AirlinePoints.get(x).firstName + " "              // This gets the first name
                            + AirlinePoints.get(x).lastName + "    "            // This gets the last name
                            + AirlinePoints.get(x).week1 + "    "               // This gets the points for the 1st week and adds it to the statement
                            + AirlinePoints.get(x).week2 + "    "               // This gets the points for the 2nd week and adds it to the statement
                            + AirlinePoints.get(x).week3 + "    "               // This gets the points for the 3rd week and adds it to the statement
                            + AirlinePoints.get(x).week4 + "\n";                // This gets the points for the 4th week and adds it to the statement
            }
        }
        
        outputDisplay.setText(temp);        // This displays all the data in the array list
           
    }//GEN-LAST:event_buttonListActionPerformed

    private void buttonTPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonTPActionPerformed
        // TODO add your handling code here:
        
        //This will store the total points of the name given
        int totalPoints;
                
        String firstNameG = "";   // This gets the first name given to find the total points 
        
        String lastNameG = "";     // This gets the last name given to find the total points 
        
        firstNameG = inputFirst.getText();   // This gets the first name given to find the total points 
        
        lastNameG = inputLast.getText();     // This gets the last name given to find the total points 
        
        // This for loop is calculate the total points of the given name
        for(int i = 0; i < AirlinePoints.size(); i++)
        {
            String firstN = AirlinePoints.get(i).firstName;     // This stores the first name of the person stored in the array at i
            
            String lastN = AirlinePoints.get(i).lastName;       // This stores the last name of the person stored in the array at i

            // This if statement matches the name given with the name in the array
            if(firstN.equals(firstNameG) || lastN.equals(lastNameG))       
            {
                // If the name given matches with the name in the array, then it uses the totalPointsF user class to add the 4 weeks to get the total
                totalPoints = totalPointsF(AirlinePoints.get(i).week1, AirlinePoints.get(i).week2, AirlinePoints.get(i).week3, AirlinePoints.get(i).week4);
                
                /* This if statement is for the bonus. If the total points are higher
                 * than 5000, then it gives the bonus to the person, if not, then it says no bonus
                */
                if(totalPoints > 5000)
                {
                    outputDisplay.setText(AirlinePoints.get(i).firstName + "'s Total Points are:  " + totalPoints + "  Bonus: 1000");       //Displays the first name, shows the total points, and shows the bonus
                }
                else
                {
                    outputDisplay.setText(AirlinePoints.get(i).firstName + "'s Total Points are:  " + totalPoints + "  Bonus: 0");          //Displays the first name, shows the total points, and shows the bonus
                }
            }       
        }   
        
        
    }//GEN-LAST:event_buttonTPActionPerformed

    private void buttonExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonExitActionPerformed
        // TODO add your handling code here:
        
        // This is to clear up the text file
        try {
            RandomAccessFile randomAccessFile = new RandomAccessFile("AirplanePointsCustomers.txt", "rw");      // This accesses the file
            byte b;
            long length = randomAccessFile.length() ;           // Finds the length of the file
            if (length != 0) {
                do {
                    length -= 1;
                    randomAccessFile.seek(length - length);     // Sets offset
                    b = randomAccessFile.readByte();
                } while (b != 10 && length > 0);
                randomAccessFile.setLength(length);     // Sets the file length to 0
                randomAccessFile.close();               // Closes file
            }
        } catch (IOException e) {
            e.printStackTrace();
        }   
        
        // This writes the current database information onto the file
        for(int i = 0; i < AirlinePoints.size(); i++)
        {
            try {
                FileWriter writer = new FileWriter("AirplanePointsCustomers.txt", true);        // Finds the file to write on
                
                writer.write(AirlinePoints.get(i).firstName);                   // Writes information
                writer.write("\r\n");                                           // Moves it to the next line
                writer.write(AirlinePoints.get(i).lastName);    
                writer.write("\r\n");   
                writer.write(String.valueOf(AirlinePoints.get(i).week1));
                writer.write("\r\n");   
                writer.write(String.valueOf(AirlinePoints.get(i).week2));
                writer.write("\r\n");   
                writer.write(String.valueOf(AirlinePoints.get(i).week3));
                writer.write("\r\n");   
                writer.write(String.valueOf(AirlinePoints.get(i).week4));
                writer.write("\r\n");
                
                writer.close();                 // Closes the writer
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        
        // This closes up the program
        dispose();
        
    }//GEN-LAST:event_buttonExitActionPerformed

    private void buttonSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSortActionPerformed
        // TODO add your handling code here:
        
        // This sorts the program by the first name
        sortFirst();
        
        //Declaring string which will be used to store the statemnet
        String temp1 = "";
        
        //This is gathering all the values and creating a statemnet,
        for (int x = 0; x <= AirlinePoints.size()-1; x++) 
        {            
            {
                temp1 = temp1 + AirlinePoints.get(x).firstName + " "             // This gets the first name
                              + AirlinePoints.get(x).lastName + "    "           // This gets the last name
                              + AirlinePoints.get(x).week1 + "    "              // This gets the points for the 1st week and adds it to the statement
                              + AirlinePoints.get(x).week2 + "    "              // This gets the points for the 2nd week and adds it to the statement
                              + AirlinePoints.get(x).week3 + "    "              // This gets the points for the 3rd week and adds it to the statement
                              + AirlinePoints.get(x).week4 + "\n";               // This gets the points for the 4th week and adds it to the statement
            }
        }
        
        outputDisplay.setText(temp1);        // This displays all the data in the array list
        
    }//GEN-LAST:event_buttonSortActionPerformed

    private void buttonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDeleteActionPerformed
        // TODO add your handling code here:
        
        String firstNameD = inputFirst.getText();   // This gets the first name given to delete the user 
        
        String lastNameD = inputLast.getText();     // This gets the last name given to delete the user 
        
        // This for loop is calculate the total points of the given name
        for(int i = 0; i < AirlinePoints.size(); i++)
        {
            String firstN = AirlinePoints.get(i).firstName;     // This stores the first name of the person stored in the array at i
            
            String lastN = AirlinePoints.get(i).lastName;       // This stores the last name of the person stored in the array at i

            // This if statement matches the name given with the name in the array
            if(firstN.equals(firstNameD) && lastN.equals(lastNameD))       
            {
                // If the name given matches with the name in the array, then it removes the user                
                AirlinePoints.remove(i);
            }
        }   
        
    }//GEN-LAST:event_buttonDeleteActionPerformed

    private void buttonEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEditActionPerformed
        // TODO add your handling code here:
        
        String firstNameE = inputFirst.getText();   // This gets the first name given to delete the user 
        
        String lastNameE = inputLast.getText();     // This gets the last name given to delete the user 
        
        int week1E = 0;         // Initializes a variable to store points for week 1
        int week2E = 0;         // Initializes a variable to store points for week 2
        int week3E = 0;         // Initializes a variable to store points for week 3
        int week4E = 0;         // Initializes a variable to store points for week 4
            
        week1E = Integer.parseInt(inputWeek1.getText());     // This gets the points for the 1st week and turns the value into an integer
        week2E = Integer.parseInt(inputWeek2.getText());     // This gets the points for the 2nd week and turns the value into an integer
        week3E = Integer.parseInt(inputWeek3.getText());     // This gets the points for the 3rd week and turns the value into an integer
        week4E = Integer.parseInt(inputWeek4.getText());     // This gets the points for the 4th week and turns the value into an integer
        
        // This for loop is calculate the total points of the given name
        for(int i = 0; i < AirlinePoints.size(); i++){
            
            String firstN = AirlinePoints.get(i).firstName;     // This stores the first name of the person stored in the array at i
            
            String lastN = AirlinePoints.get(i).lastName;       // This stores the last name of the person stored in the array at i

            // This if statement matches the name given with the name in the array
            if(firstN.equals(firstNameE) && lastN.equals(lastNameE))       
            {
                // If the name given matches with the name in the array, then it removes the user                
                AirlinePoints.get(i).week1 = week1E;
                AirlinePoints.get(i).week2 = week2E;
                AirlinePoints.get(i).week3 = week3E;
                AirlinePoints.get(i).week4 = week4E;
            }
        }   
        
    }//GEN-LAST:event_buttonEditActionPerformed

    private void buttonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSearchActionPerformed
        // TODO add your handling code here:
        
        //This will store the total points of the name given
        int totalPoints;
                
        String compareStr = "";     // This is just to compare names
        
        String firstNameG = "";     // This gets the first name given to find the total points 
        
        String lastNameG = "";      // This gets the last name given to find the total points 
        
        firstNameG = inputFirst.getText();   // This gets the first name given to find the total points 
        
        lastNameG = inputLast.getText();     // This gets the last name given to find the total points 

        // If a first name is given then it uses this method
        if (!firstNameG.equalsIgnoreCase(compareStr)){
            try {
                for(int i = 0; i < AirlinePoints.size(); i++){
                    //This does the binary search
                    int search = binarySearchF(AirlinePoints, 0, AirlinePoints.size()-1, firstNameG);

                    //If the search is not found, then displays message
                    if (search == -1){
                        outputDisplay.setText("This Name Does Not Match Any Passengers In The Database");
                    }
                    //If found then it displays the passengers information
                    else{
                        // If the name given matches with the name in the array, then it uses the totalPointsF user class to add the 4 weeks to get the total
                        totalPoints = totalPointsF(AirlinePoints.get(search).week1, AirlinePoints.get(search).week2, AirlinePoints.get(search).week3, AirlinePoints.get(search).week4);

                        {                                       
                            outputDisplay.setText("Customer Name: " + AirlinePoints.get(search).firstName + " " + AirlinePoints.get(search).lastName + "\n");
                            outputDisplay.append("Week 1 Points: " + AirlinePoints.get(search).week1 + "\n" );
                            outputDisplay.append("Week 2 Points: " + AirlinePoints.get(search).week2 + "\n" );
                            outputDisplay.append("Week 3 Points: " + AirlinePoints.get(search).week3 + "\n" );
                            outputDisplay.append("Week 4 Points: " + AirlinePoints.get(search).week4 + "\n" );
                            outputDisplay.append("Total Points: " + totalPoints);
                        }
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();        
            }
        }
        
        // If a last name is given then it uses this method
        if (!lastNameG.equalsIgnoreCase(compareStr)){
            
            sortLast();         // Sorts the database by last name
            
            try {
                for(int i = 0; i < AirlinePoints.size(); i++){
                    //This does the binary search
                    int search = binarySearchL(AirlinePoints, 0, AirlinePoints.size()-1, lastNameG);

                    //If the search is not found, then displays message
                    if (search == -1){
                        outputDisplay.setText("This Name Does Not Match Any Names In The Database");
                    }
                    //If found then it displays the passenger's name and points
                    else{
                        // If the name given matches with the name in the array, then it uses the totalPointsF user class to add the 4 weeks to get the total
                        totalPoints = totalPointsF(AirlinePoints.get(search).week1, AirlinePoints.get(search).week2, AirlinePoints.get(search).week3, AirlinePoints.get(search).week4);

                        {                                       
                            outputDisplay.setText("Customer Name: " + AirlinePoints.get(search).firstName + " " + AirlinePoints.get(search).lastName + "\n");   // This displays the name
                            outputDisplay.append("Week 1 Points: " + AirlinePoints.get(search).week1 + "\n" );      // Displays points for week 1
                            outputDisplay.append("Week 2 Points: " + AirlinePoints.get(search).week2 + "\n" );      // Displays points for week 2
                            outputDisplay.append("Week 3 Points: " + AirlinePoints.get(search).week3 + "\n" );      // Displays points for week 3
                            outputDisplay.append("Week 4 Points: " + AirlinePoints.get(search).week4 + "\n" );      // Displays points for week 4
                            outputDisplay.append("Total Points: " + totalPoints);           // Displays total points for the passenger
                        }
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();        
            }
            
            sortFirst();            // Sorts the list by first name, to its original form
        }
        
    }//GEN-LAST:event_buttonSearchActionPerformed
    
    /**This is the class where the airplane points data is given to
    *and then sent to the array*/
    class AirlinePointsClass {
        int week1, week2, week3, week4;
        String firstName, lastName;
        AirlinePointsClass ( String _firstName, String _lastName, int _week1, int _week2, int _week3,int _week4) {
            firstName = _firstName;
            lastName = _lastName;
            week1 = _week1;
            week2 = _week2;
            week3 = _week3;
            week4 = _week4;
        }
    }

    //This is the Binary Search Method if the first name is given
    public int binarySearchF(ArrayList <AirlinePointsClass> airlineP, int left, int right, String firstName){

        if (left > right) {
            return -1;
        }
        int middle = left + (right - left)/2;
        
        if (AirlinePoints.get(middle).firstName.equalsIgnoreCase(firstName)) {
            return middle;
        }
                
        if (AirlinePoints.get(middle).firstName.compareToIgnoreCase(firstName) > 0) {
            return binarySearchF(airlineP, left, middle - 1, firstName);
        } else {
            return binarySearchF(airlineP, middle + 1, right, firstName);
        }
    }
    
    //This is the Binary Search Method if the last name is given
    public int binarySearchL(ArrayList <AirlinePointsClass> airlineP, int left, int right, String lastName){

        if (left > right) {
            return -1;
        }
        int middle = left + (right - left)/2;
        
        if (AirlinePoints.get(middle).lastName.equalsIgnoreCase(lastName)) {
            return middle;
        }
                
        if (AirlinePoints.get(middle).lastName.compareToIgnoreCase(lastName) > 0) {
            return binarySearchL(airlineP, left, middle - 1, lastName);
        } else {
            return binarySearchL(airlineP, middle + 1, right, lastName);
        }
    }
    
    // This sorts it by first name
    private int sortFirst(){
        
        int sortFirstVal = 0;
        
        String tempFirst;                   // Initializes variables used in method
        String tempLast;                    // Initializes variables used in method
        int tempW1;                         // Initializes variables used in method
        int tempW2;                         // Initializes variables used in method
        int tempW3;                         // Initializes variables used in method
        int tempW4;                         // Initializes variables used in method
        
        for(int i = 0; i < AirlinePoints.size(); i++)      // For loop to sort passengers
        {
            for (int j = i + 1; j < AirlinePoints.size(); j++){
                if ( AirlinePoints.get(i).firstName.compareToIgnoreCase( AirlinePoints.get(j).firstName) > 0) 
                {
                    tempFirst = AirlinePoints.get(i).firstName;     // Puts name in a temporary var    
                    tempLast = AirlinePoints.get(i).lastName;       // Puts name in a temporary var    
                    tempW1 = AirlinePoints.get(i).week1;            // Puts points in a temporary var    
                    tempW2 = AirlinePoints.get(i).week2;            // Puts points in a temporary var    
                    tempW3 = AirlinePoints.get(i).week3;            // Puts points in a temporary var    
                    tempW4 = AirlinePoints.get(i).week4;            // Puts points in a temporary var                      
                    
                    AirlinePoints.get(i).firstName = AirlinePoints.get(j).firstName;        // Replaces the name 
                    AirlinePoints.get(i).lastName = AirlinePoints.get(j).lastName;          // Replaces the name 
                    AirlinePoints.get(i).week1 = AirlinePoints.get(j).week1;                // Replaces the points 
                    AirlinePoints.get(i).week2 = AirlinePoints.get(j).week2;                // Replaces the points 
                    AirlinePoints.get(i).week3 = AirlinePoints.get(j).week3;                // Replaces the points 
                    AirlinePoints.get(i).week4 = AirlinePoints.get(j).week4;                // Replaces the points 
                    
                    AirlinePoints.get(j).firstName = tempFirst;         // Puts name in a temporary var
                    AirlinePoints.get(j).lastName = tempLast;           // Puts name in a temporary var
                    AirlinePoints.get(j).week1 = tempW1;                // Puts points in a temporary var
                    AirlinePoints.get(j).week2 = tempW2;                // Puts points in a temporary var   
                    AirlinePoints.get(j).week3 = tempW3;                // Puts points in a temporary var
                    AirlinePoints.get(j).week4 = tempW4;                // Puts points in a temporary var
                }
            }
        }     
        return sortFirstVal;
    }
    
    // This sorts it by last name
    private int sortLast(){
        
        int sortLastVal = 0;
        
        // Sorts
        String tempFirst;                   // Initializes variables used in method
        String tempLast;                    // Initializes variables used in method
        int tempW1;                         // Initializes variables used in method
        int tempW2;                         // Initializes variables used in method
        int tempW3;                         // Initializes variables used in method
        int tempW4;                         // Initializes variables used in method
        
        
        for(int i = 0; i < AirlinePoints.size(); i++)      // For loop to sort passengers
        {
            for (int j = i + 1; j < AirlinePoints.size(); j++){
                if ( AirlinePoints.get(i).lastName.compareToIgnoreCase( AirlinePoints.get(j).lastName) > 0) 
                {
                    tempFirst = AirlinePoints.get(i).firstName;     // Puts name in a temporary var    
                    tempLast = AirlinePoints.get(i).lastName;       // Puts name in a temporary var    
                    tempW1 = AirlinePoints.get(i).week1;            // Puts points in a temporary var    
                    tempW2 = AirlinePoints.get(i).week2;            // Puts points in a temporary var    
                    tempW3 = AirlinePoints.get(i).week3;            // Puts points in a temporary var    
                    tempW4 = AirlinePoints.get(i).week4;            // Puts points in a temporary var                      
                    
                    AirlinePoints.get(i).firstName = AirlinePoints.get(j).firstName;        // Replaces the name 
                    AirlinePoints.get(i).lastName = AirlinePoints.get(j).lastName;          // Replaces the name 
                    AirlinePoints.get(i).week1 = AirlinePoints.get(j).week1;                // Replaces the points 
                    AirlinePoints.get(i).week2 = AirlinePoints.get(j).week2;                // Replaces the points 
                    AirlinePoints.get(i).week3 = AirlinePoints.get(j).week3;                // Replaces the points 
                    AirlinePoints.get(i).week4 = AirlinePoints.get(j).week4;                // Replaces the points 
                    
                    AirlinePoints.get(j).firstName = tempFirst;         // Puts name in a temporary var
                    AirlinePoints.get(j).lastName = tempLast;           // Puts name in a temporary var
                    AirlinePoints.get(j).week1 = tempW1;                // Puts points in a temporary var
                    AirlinePoints.get(j).week2 = tempW2;                // Puts points in a temporary var   
                    AirlinePoints.get(j).week3 = tempW3;                // Puts points in a temporary var
                    AirlinePoints.get(j).week4 = tempW4;                // Puts points in a temporary var
                }
            }
        }     
        return sortLastVal;
    }

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AirlinePointsJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AirlinePointsJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AirlinePointsJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AirlinePointsJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AirlinePointsJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAdd;
    private javax.swing.JButton buttonDelete;
    private javax.swing.JButton buttonEdit;
    private javax.swing.JButton buttonExit;
    private javax.swing.JButton buttonList;
    private javax.swing.JButton buttonSearch;
    private javax.swing.JButton buttonSort;
    private javax.swing.JButton buttonTP;
    private javax.swing.JTextField inputFirst;
    private javax.swing.JTextField inputLast;
    private javax.swing.JTextField inputWeek1;
    private javax.swing.JTextField inputWeek2;
    private javax.swing.JTextField inputWeek3;
    private javax.swing.JTextField inputWeek4;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextArea outputDisplay;
    // End of variables declaration//GEN-END:variables
}
